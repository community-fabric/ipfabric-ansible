# README FIRST
# 1. If you don't have unit tests, remove that section.
# 2. If your collection depends on other collections ensure they are installed,
#    add them to the "test-deps" input.
# 3. For the comprehensive list of the inputs supported by the
#    ansible-community/ansible-test-gh-action GitHub Action, see
#    https://github.com/marketplace/actions/ansible-test.
# 4. If you want to prevent merging PRs that do not pass all tests,
#    make sure to add the "check" job to your repository branch
#    protection once this workflow is added.
#    It is also possible to tweak which jobs are allowed to fail. See
#    https://github.com/marketplace/actions/alls-green#gotchas for more detail.
# 5. If you need help please ask in #ansible-community on the Libera.chat IRC
#    network.

name: CI
on:
  # Run CI against all pushes (direct commits, also merged PRs), Pull Requests
  push:
    branches:
      - main
      - stable-*
  pull_request:
  # Run CI once per day (at 06:00 UTC)
  # This ensures that even if there haven't been commits that we are still
  # testing against latest version of ansible-test for each ansible-core
  # version
  schedule:
    - cron: '0 6 * * *'

concurrency:
  group: >-
    ${{ github.workflow }}-${{
      github.event.pull_request.number || github.sha
    }}
  cancel-in-progress: true

jobs:

###
# Sanity tests (REQUIRED)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_sanity.html

  sanity:
    name: Sanity (Ⓐ${{ matrix.ansible }})
    strategy:
      matrix:
        ansible:
          - stable-2.11
          - stable-2.12
          - stable-2.13
          - stable-2.14
          - devel
        # - milestone

    runs-on: ubuntu-20.04
    steps:
      # Run sanity tests inside a Docker container.
      # The docker container has all the pinned dependencies that are
      # required and all Python versions Ansible supports.
      - name: Perform sanity testing
        uses: ansible-community/ansible-test-gh-action@v1.10.0
        with:
          ansible-core-version: ${{ matrix.ansible }}
          testing-type: sanity
          target-python-version: "3.9"

  units:
    runs-on: ubuntu-20.04
    name: Units (Ⓐ${{ matrix.ansible }})
    strategy:
      # As soon as the first unit test fails, cancel the others to free up the CI queue
      matrix:
        ansible:
          # - stable-2.11 # Tests fail as conflicting requirements for HTTPX and Ansible-Test for IDNA > 2.8
          # - stable-2.12 # Tests fail as conflicting requirements for HTTPX and Ansible-Test for IDNA > 2.8
          - stable-2.13
          - stable-2.14
          - devel

    steps:
      - name: >-
          Perform unit testing against
          Ansible version ${{ matrix.ansible }}
        uses: ansible-community/ansible-test-gh-action@v1.10.0
        with:
          ansible-core-version: ${{ matrix.ansible }}
          testing-type: units
          target-python-version: "3.10"

  check:  # This job does nothing and is only used for the branch protection
          # or multi-stage CI jobs, like making sure that all tests pass before
          # a publishing job is started.
    if: always()

    needs:
      - sanity

    runs-on: ubuntu-20.04

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
